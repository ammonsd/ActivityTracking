AWSTemplateFormatVersion: '2010-09-09'
Description: 'Task Activity Tracking Application - Complete Infrastructure Stack'

###############################################################################
# CloudFormation Template for Task Activity Application
# 
# NOTE: VS Code YAML validation may show type warnings for CloudFormation
# intrinsic functions (!Ref, !Sub, !If, etc.). These are false positives.
# CloudFormation resolves these to correct types at runtime.
# For better validation, install: AWS Toolkit for Visual Studio Code
#
# This template creates all AWS infrastructure needed to run the application:
# - VPC with public/private subnets
# - RDS PostgreSQL database
# - ECS Fargate cluster and service
# - Application Load Balancer
# - ECR repository
# - Secrets Manager secrets
# - IAM roles and policies
# - Security groups
# - CloudWatch log groups
#
# Author: Dean Ammons
# Date: October 28, 2025
###############################################################################

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - production
    Description: Environment name (dev, staging, or production)

  # VPC Configuration
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}/\d{1,2}$'

  # Database Configuration
  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t4g.micro
      - db.t4g.small
      - db.t4g.medium
    Description: RDS instance type

  DBAllocatedStorage:
    Type: Number
    Default: 20
    MinValue: 20
    MaxValue: 100
    Description: Database storage size in GB

  DBName:
    Type: String
    Default: AmmoP1DB
    Description: Database name

  DBUsername:
    Type: String
    Default: postgres
    NoEcho: true
    Description: Database master username

  DBPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Database master password (min 8 characters)

  # Application Configuration
  AdminPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Initial admin user password

  # ECS Configuration
  TaskCPU:
    Type: String
    Default: '512'
    AllowedValues:
      - '256'
      - '512'
      - '1024'
      - '2048'
    Description: Task CPU units (256 = 0.25 vCPU)

  TaskMemory:
    Type: String
    Default: '1024'
    AllowedValues:
      - '512'
      - '1024'
      - '2048'
      - '4096'
    Description: Task memory in MB

  DesiredCount:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 10
    Description: Desired number of ECS tasks

  ContainerPort:
    Type: Number
    Default: 8080
    Description: Application container port

  # Cloudflare Configuration (Optional)
  CloudflareTunnelCredentials:
    Type: String
    Default: ''
    NoEcho: true
    Description: Cloudflare tunnel credentials JSON (optional, leave empty if not using)

  CloudflareTunnelConfig:
    Type: String
    Default: ''
    NoEcho: true
    Description: Cloudflare tunnel config YAML (optional, leave empty if not using)

Conditions:
  IsProduction: !Equals [!Ref Environment, production]
  HasCloudflare: !Not [!Equals [!Ref CloudflareTunnelCredentials, '']]
  EnableMultiAZ: !Equals [!Ref Environment, production]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Environment Configuration
        Parameters:
          - Environment
      - Label:
          default: Network Configuration
        Parameters:
          - VpcCIDR
      - Label:
          default: Database Configuration
        Parameters:
          - DBInstanceClass
          - DBAllocatedStorage
          - DBName
          - DBUsername
          - DBPassword
      - Label:
          default: Application Configuration
        Parameters:
          - AdminPassword
          - TaskCPU
          - TaskMemory
          - DesiredCount
          - ContainerPort
      - Label:
          default: Cloudflare Configuration (Optional)
        Parameters:
          - CloudflareTunnelCredentials
          - CloudflareTunnelConfig

Resources:
  ###############################################################################
  # VPC and Network Resources
  ###############################################################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc
        - Key: Environment
          Value: !Ref Environment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw
        - Key: Environment
          Value: !Ref Environment

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [0, !Cidr [!Ref VpcCIDR, 4, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [1, !Cidr [!Ref VpcCIDR, 4, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2
        - Key: Environment
          Value: !Ref Environment

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [2, !Cidr [!Ref VpcCIDR, 4, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-1
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [3, !Cidr [!Ref VpcCIDR, 4, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-2
        - Key: Environment
          Value: !Ref Environment

  # NAT Gateway for private subnets
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nat-eip
        - Key: Environment
          Value: !Ref Environment

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nat-gateway
        - Key: Environment
          Value: !Ref Environment

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-rt
        - Key: Environment
          Value: !Ref Environment

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-rt
        - Key: Environment
          Value: !Ref Environment

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  ###############################################################################
  # Security Groups
  ###############################################################################

  # Application Load Balancer Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-alb-sg
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS from anywhere
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb-sg
        - Key: Environment
          Value: !Ref Environment

  # ECS Tasks Security Group
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ecs-sg
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow traffic from ALB
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ecs-sg
        - Key: Environment
          Value: !Ref Environment

  # RDS Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-rds-sg
      GroupDescription: Security group for RDS database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
          Description: Allow PostgreSQL from ECS tasks
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-rds-sg
        - Key: Environment
          Value: !Ref Environment

  ###############################################################################
  # Secrets Manager
  ###############################################################################

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub taskactivity/${Environment}/database/credentials
      Description: Database credentials for Task Activity application
      SecretString: !Sub |
        {
          "username": "${DBUsername}",
          "password": "${DBPassword}",
          "jdbcUrl": "jdbc:postgresql://${DBInstance.Endpoint.Address}:${DBInstance.Endpoint.Port}/${DBName}"
        }
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-secret
        - Key: Environment
          Value: !Ref Environment

  AdminSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub taskactivity/${Environment}/admin/credentials
      Description: Admin credentials for Task Activity application
      SecretString: !Sub |
        {
          "password": "${AdminPassword}"
        }
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-admin-secret
        - Key: Environment
          Value: !Ref Environment

  CloudflareCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Condition: HasCloudflare
    Properties:
      Name: !Sub taskactivity/${Environment}/cloudflare/tunnel-credentials
      Description: Cloudflare tunnel credentials
      SecretString: !Ref CloudflareTunnelCredentials
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-cloudflare-creds
        - Key: Environment
          Value: !Ref Environment

  CloudflareConfigSecret:
    Type: AWS::SecretsManager::Secret
    Condition: HasCloudflare
    Properties:
      Name: !Sub taskactivity/${Environment}/cloudflare/config
      Description: Cloudflare tunnel configuration
      SecretString: !Ref CloudflareTunnelConfig
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-cloudflare-config
        - Key: Environment
          Value: !Ref Environment

  ###############################################################################
  # RDS Database
  ###############################################################################

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${AWS::StackName}-db-subnet-group
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-subnet-group
        - Key: Environment
          Value: !Ref Environment

  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub ${AWS::StackName}-db
      Engine: postgres
      EngineVersion: '15.14'
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      StorageType: gp3
      StorageEncrypted: true
      DBName: !Ref DBName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: !If [EnableMultiAZ, true, false]
      PubliclyAccessible: false
      BackupRetentionPeriod: !If [IsProduction, 7, 1]
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'sun:04:00-sun:05:00'
      EnableCloudwatchLogsExports:
        - postgresql
      DeletionProtection: !If [IsProduction, true, false]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db
        - Key: Environment
          Value: !Ref Environment

  ###############################################################################
  # ECR Repository
  ###############################################################################

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub taskactivity-${Environment}
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only 5 most recent tagged images",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["v", "latest"],
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 2,
                "description": "Delete untagged images older than 1 day",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 1
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ecr
        - Key: Environment
          Value: !Ref Environment

  ###############################################################################
  # IAM Roles and Policies
  ###############################################################################

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ecs-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Ref DatabaseSecret
                  - !Ref AdminSecret
                  - !If
                    - HasCloudflare
                    - !Ref CloudflareCredentialsSecret
                    - !Ref AWS::NoValue
                  - !If
                    - HasCloudflare
                    - !Ref CloudflareConfigSecret
                    - !Ref AWS::NoValue
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: '*'
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ecs-execution-role
        - Key: Environment
          Value: !Ref Environment

  # ECS Task Role
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ecs-task-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Ref DatabaseSecret
                  - !Ref AdminSecret
                  - !If
                    - HasCloudflare
                    - !Ref CloudflareCredentialsSecret
                    - !Ref AWS::NoValue
                  - !If
                    - HasCloudflare
                    - !Ref CloudflareConfigSecret
                    - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ecs-task-role
        - Key: Environment
          Value: !Ref Environment

  ###############################################################################
  # CloudWatch Logs
  ###############################################################################

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/taskactivity-${Environment}
      RetentionInDays: !If [IsProduction, 30, 7]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ecs-logs
        - Key: Environment
          Value: !Ref Environment

  ###############################################################################
  # Application Load Balancer
  ###############################################################################

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-alb
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb
        - Key: Environment
          Value: !Ref Environment

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-tg
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-tg
        - Key: Environment
          Value: !Ref Environment

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ###############################################################################
  # ECS Cluster and Service
  ###############################################################################

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: !If [IsProduction, enabled, disabled]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-cluster
        - Key: Environment
          Value: !Ref Environment

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCPU
      Memory: !Ref TaskMemory
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: taskactivity
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
              Name: !Sub taskactivity-${ContainerPort}-tcp
              AppProtocol: http
          Environment:
            - Name: SPRING_APPLICATION_JSON
              Value: !Sub '{"server.port":${ContainerPort}}'
            - Name: SPRING_PROFILES_ACTIVE
              Value: aws
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: LOG_LEVEL
              Value: INFO
            - Name: SECURITY_LOG_LEVEL
              Value: WARN
            - Name: ENABLE_FILE_LOGGING
              Value: 'false'
          Secrets:
            - Name: DB_USERNAME
              ValueFrom: !Sub '${DatabaseSecret}:username::'
            - Name: DB_PASSWORD
              ValueFrom: !Sub '${DatabaseSecret}:password::'
            - Name: DATABASE_URL
              ValueFrom: !Sub '${DatabaseSecret}:jdbcUrl::'
            - Name: APP_ADMIN_INITIAL_PASSWORD
              ValueFrom: !Sub '${AdminSecret}:password::'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
          HealthCheck:
            Command:
              - CMD-SHELL
              - !Sub 'curl -f http://localhost:${ContainerPort}/actuator/health || exit 1'
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          StopTimeout: 30
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-task
        - Key: Environment
          Value: !Ref Environment

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub ${AWS::StackName}-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: taskactivity
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ALBTargetGroup
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-service
        - Key: Environment
          Value: !Ref Environment

###############################################################################
# Outputs
###############################################################################

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCId

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2

  DBEndpoint:
    Description: RDS database endpoint
    Value: !GetAtt DBInstance.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DBEndpoint

  DBPort:
    Description: RDS database port
    Value: !GetAtt DBInstance.Endpoint.Port
    Export:
      Name: !Sub ${AWS::StackName}-DBPort

  ECRRepositoryURI:
    Description: ECR repository URI
    Value: !GetAtt ECRRepository.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-ECRRepositoryURI

  LoadBalancerDNS:
    Description: Application Load Balancer DNS name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerDNS

  LoadBalancerURL:
    Description: Application URL
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}

  ECSClusterName:
    Description: ECS Cluster name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ECSCluster

  ECSServiceName:
    Description: ECS Service name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub ${AWS::StackName}-ECSService

  DatabaseSecretArn:
    Description: Database credentials secret ARN
    Value: !Ref DatabaseSecret
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSecretArn

  AdminSecretArn:
    Description: Admin credentials secret ARN
    Value: !Ref AdminSecret
    Export:
      Name: !Sub ${AWS::StackName}-AdminSecretArn

  ECSTaskExecutionRoleArn:
    Description: ECS Task Execution Role ARN
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ECSTaskExecutionRoleArn

  ECSTaskRoleArn:
    Description: ECS Task Role ARN
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ECSTaskRoleArn

  LogGroupName:
    Description: CloudWatch Log Group name
    Value: !Ref ECSLogGroup
    Export:
      Name: !Sub ${AWS::StackName}-LogGroupName
